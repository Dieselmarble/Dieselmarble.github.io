<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Academic</title>
    <link>https://Dieselmarble.github.io/category/projects/</link>
      <atom:link href="https://Dieselmarble.github.io/category/projects/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 05 Sep 2018 00:04:31 +0000</lastBuildDate>
    <image>
      <url>https://Dieselmarble.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Projects</title>
      <link>https://Dieselmarble.github.io/category/projects/</link>
    </image>
    
    <item>
      <title>Brief Description of the Huawei ODN planning Problem</title>
      <link>https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/</link>
      <pubDate>Wed, 05 Sep 2018 00:04:31 +0000</pubDate>
      <guid>https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Brief Description of the Huawei ODN planning Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/ODN-net_huc312e043b1bcb8d44bfb6e5179a57958_335424_466dd74cf6b20e8217fa681bad6ba8e0.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/ODN-net_huc312e043b1bcb8d44bfb6e5179a57958_335424_b1b34eafe6f392c6aee850b047c4e869.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/ODN-net_huc312e043b1bcb8d44bfb6e5179a57958_335424_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/ODN-net_huc312e043b1bcb8d44bfb6e5179a57958_335424_466dd74cf6b20e8217fa681bad6ba8e0.png&#34;
               width=&#34;760&#34;
               height=&#34;324&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;ODN-net.png&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt;
&lt;p&gt;&lt;strong&gt;ODN Drop Optical Cables (Layer one) Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ODN drop optical problem is often modelled as a Single Source Capacitated Facility Location Problem, where each FAT (Fiber Access Terminal) is equivalent to a facility. Users are connected to FAT in a star topology.&lt;/p&gt;
&lt;p&gt;A conventional SSCFL formulation is as follows,&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL_hud9e27779874980e165a3e08c698aa390_313617_6141a6d54c96a5079febdf771589230b.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL_hud9e27779874980e165a3e08c698aa390_313617_af4342da8d7eeedc2f35154f493bc1ea.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL_hud9e27779874980e165a3e08c698aa390_313617_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/SSCFL_hud9e27779874980e165a3e08c698aa390_313617_6141a6d54c96a5079febdf771589230b.png&#34;
               width=&#34;760&#34;
               height=&#34;287&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;SSCFL.png&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-problem_hu5760d5f7964bf8a4451d14fd15cf908d_146342_36d1768aeada25361a084e7c063fd56c.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-problem_hu5760d5f7964bf8a4451d14fd15cf908d_146342_ac59e04213f38cfec4dc86628793f361.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-problem_hu5760d5f7964bf8a4451d14fd15cf908d_146342_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/FAT-problem_hu5760d5f7964bf8a4451d14fd15cf908d_146342_36d1768aeada25361a084e7c063fd56c.png&#34;
               width=&#34;760&#34;
               height=&#34;311&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;FAT-problem.png&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt; 
&lt;p&gt;Furthermore, we modified the problem to an “intersection free” mood. Because the possible arcs set A is obtained by Dijkstra’s algorithm, we could therefore know which two possible arcs have common nodes, shared line segments, or continuous plane. These are known as point, line, and plane intersections.&lt;/p&gt;
&lt;p&gt;The following two charts are examples of “plane” intersection:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/intersection_hub87c4dacf97b0dd8856be26db6b062ea_164369_d9b89c620e79d0adef90b6dda0efabeb.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/intersection_hub87c4dacf97b0dd8856be26db6b062ea_164369_a3ce02f1adafccb1bd40266fd980b856.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/intersection_hub87c4dacf97b0dd8856be26db6b062ea_164369_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/intersection_hub87c4dacf97b0dd8856be26db6b062ea_164369_d9b89c620e79d0adef90b6dda0efabeb.png&#34;
               width=&#34;760&#34;
               height=&#34;147&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;intersection.png&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt; 
&lt;p&gt;Proving we have acquired the intersection relationship between any two possible arcs. We can add logical OR constraints to those two arcs, such that
$$
y_1 + y_2 \leq 1
$$&lt;/p&gt;
&lt;p&gt;In order to give a speedup to the model, we adopt a sequential graph partition framework, which applies the famous multilevel graph partition algorithm (written in the METIS software). For each iteration, we only solves a part of the complete roadmap, until all users have been connected.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/metis-1_hu0a352487d5e957d48473b07c192d7fe1_14845_b3c655f81bae40217a17e18093e61dc2.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/metis-1_hu0a352487d5e957d48473b07c192d7fe1_14845_5c6aab789a6e76d1aa680bb04d235215.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/metis-1_hu0a352487d5e957d48473b07c192d7fe1_14845_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/metis-1_hu0a352487d5e957d48473b07c192d7fe1_14845_b3c655f81bae40217a17e18093e61dc2.png&#34;
               width=&#34;170&#34;
               height=&#34;143&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In addition, a network-flow based model has been proposed to solve the “point intersection” SSCFL problem. The model is described as follows,&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL-point-intersection_hu5c48a129f2dbea4a41814c8b32c86b38_61137_a61c557fe903bab8070b7dd6c7953763.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL-point-intersection_hu5c48a129f2dbea4a41814c8b32c86b38_61137_036db4bd588c62dc86579544ad860843.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/SSCFL-point-intersection_hu5c48a129f2dbea4a41814c8b32c86b38_61137_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/SSCFL-point-intersection_hu5c48a129f2dbea4a41814c8b32c86b38_61137_a61c557fe903bab8070b7dd6c7953763.png&#34;
               width=&#34;406&#34;
               height=&#34;266&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The drawback of this model is: it does not include distance constraints. Even though we can add on distance constraints by MTZ constraints ( Miller, C. E.; Tucker, E. W.; Zemlin, R. A. (1960). &amp;ldquo;Integer Programming Formulations and Travelling Salesman Problems&amp;rdquo;. J. ACM. &lt;strong&gt;7&lt;/strong&gt;: 326–329. doi). But the model would become slow. Furthermore, on complex roadmap, this “flow model” takes a lot of time to reach relative optimal gap (in branch and bound).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objectives:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Problem size of Layer one ranges from 500 users to 5000 users, whereas the roadmap can have up to 20,000 edges and 9,000 nodes. Of course, the possible arcs obtained by Dijkstra’s algorithm have an even larger scale.&lt;/p&gt;
&lt;p&gt;Variables and constraints:&lt;/p&gt;
&lt;p&gt;FAT location are to be solved;&lt;/p&gt;
&lt;p&gt;Users’ location and number are pre-defined;&lt;/p&gt;
&lt;p&gt;Maximum cable length constraints must be met;&lt;/p&gt;
&lt;p&gt;Capacity of the hub box must be met;&lt;/p&gt;
&lt;p&gt;Problem scale: 500-5000 users to be connected&lt;/p&gt;
&lt;p&gt;We aim to minimize the number of FATs used (primary goal), and the total routing distance (second goal), with intersection free, and under distance, capacity constraints.&lt;/p&gt;
&lt;p&gt;Speed of the algorithm is also a very important factor taken into consideration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ways to improve:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Better (Lean) model of formulations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce the number of “intersection” constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A better graph partition method, other than METIS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better post-processing methods, merging two under-volume clusters, e.g. merge three clusters into two, five into four, etc. Very similar to Jewel of Atlantis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ODN Pre-Connection (Layer two) Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-box_hu237f4b0e4023cd090c894dae6eb96e08_14687_d29bf18d2542bbd0e078091d28b08fbe.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-box_hu237f4b0e4023cd090c894dae6eb96e08_14687_227add270854a5c159ee5c0898876b69.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FAT-box_hu237f4b0e4023cd090c894dae6eb96e08_14687_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/FAT-box_hu237f4b0e4023cd090c894dae6eb96e08_14687_d29bf18d2542bbd0e078091d28b08fbe.png&#34;
               width=&#34;125&#34;
               height=&#34;125&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The pre-connection problem targets at FDT -&amp;gt; FAT of an ODN network. Conventionally, 4 FATs are connected in a chain manner, whereas 4 chains are joint together (at a starting node, FDT), forming a complete pre-connection topology.&lt;/p&gt;
&lt;p&gt;The picture below illustrates what is a pre-connection topology, where 4 chains are jointly connected at the FDT depot (green node).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://Dieselmarble.github.io/uploads/FDT-topology.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The layer two problem is very similar to The Multiple Depot, Multiple Traveling Salesmen Facility-Location Problem. (The Multiple Depot, Multiple Traveling Salesmen Facility-Location Problem: Vehicle Range, Service Frequency, and Heuristic Implementations - YuPo CHAN)&lt;/p&gt;
&lt;p&gt;One of the modelling technique is to mimic the problem as a MDMTSFLP. Given the very large problem scale, this approach is considered to be time consuming. In addition, chains belongs to different FDTs must not intersect.&lt;/p&gt;
&lt;p&gt;Hence, we applied a two-stage manner approach. Using a similar flow model as in the layer one task, the roadmap is first split into several node-disjoint trees. Then we solve the routing problem inside each tree by the capacitated vehicle routing model (CVRP).&lt;/p&gt;
&lt;p&gt;The chart below illustrates the preliminary result after the splitting stage, after which CVRP is applied on each depots, inside on selected tree (in red).&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /project/brief-description-of-the-huawei-odn-planning-problem/FDT-connection_hu840fa005398e4e97338741eb7cd318ae_23670_083fd3641302c0f5837eec45d56bb5b0.png 400w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FDT-connection_hu840fa005398e4e97338741eb7cd318ae_23670_bb0cd427257f604e914ef2efca8d7dc6.png 760w,
               /project/brief-description-of-the-huawei-odn-planning-problem/FDT-connection_hu840fa005398e4e97338741eb7cd318ae_23670_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/brief-description-of-the-huawei-odn-planning-problem/FDT-connection_hu840fa005398e4e97338741eb7cd318ae_23670_083fd3641302c0f5837eec45d56bb5b0.png&#34;
               width=&#34;181&#34;
               height=&#34;125&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Furthermore, we care of route repetition rate, which is the duplicate routes/total routing distance traversed by distinct chains origins from FDT.&lt;/p&gt;
&lt;p&gt;Variables and constraints:&lt;/p&gt;
&lt;p&gt;FDT location are to be solved;&lt;/p&gt;
&lt;p&gt;FAT numbers/locations are pre-defined;&lt;/p&gt;
&lt;p&gt;Maximum cable length constraints must be met;&lt;/p&gt;
&lt;p&gt;Capacity of the hub box must be met;&lt;/p&gt;
&lt;p&gt;Problem scale: 30 – 300 FAT to be connected&lt;/p&gt;
&lt;p&gt;We aim to minimize both FDT number and total routing distance with an emphasis on FDT number.&lt;/p&gt;
&lt;p&gt;Time performance is notably important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ways to improve:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A fast, effective heuristic methods in replacement of the current integer programming model. Capacitated minimum spanning tree sounds promising, but we cares more about reducing the number of FDT, not total distance. Therefore, trees are intrinsically minimum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solve the whole pre-connection problem as one “Location Routing Problem”, rather than two stages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Computing platform and time:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The current algorithm runs on laptops, normally Intel i9 with 32G of RAM&lt;/p&gt;
&lt;p&gt;Time Limit: The current algorithm solves 5000 demand users within 10mins.&lt;/p&gt;
&lt;p&gt;For longer term research purpose, the algorithm may be migrated to a server (Intel Xeon, 128GB) .Time performance should be less than 10 minutes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The 3 Phase Brushless Linear Motor With Trapezoidal Control</title>
      <link>https://Dieselmarble.github.io/project/three-phase-brushless-linear-motor-with-trapezoidal-control/</link>
      <pubDate>Wed, 05 Sep 2018 00:04:31 +0000</pubDate>
      <guid>https://Dieselmarble.github.io/project/three-phase-brushless-linear-motor-with-trapezoidal-control/</guid>
      <description>&lt;h3 id=&#34;the-outlook-of-my-linear-motor&#34;&gt;The outlook of my linear motor&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://Dieselmarble.github.io/uploads/motor.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;motor.jpg&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt;
&lt;p&gt;This novel linear motor is one of the projects  during my placement at Ocado Technolgy. I designed and developed this linear motor independently, from mechanical CAD to embedded programming in C.&lt;/p&gt;
&lt;p&gt;I use STM32 microcontroller and six step inverter to perform Back EMF sensorless control.&lt;/p&gt;
&lt;h3 id=&#34;some-testing-result&#34;&gt;Some testing result&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /project/three-phase-brushless-linear-motor-with-trapezoidal-control/bemf_hu3173dcf2f0539f68d0a430a952bdc1a3_2433271_df7ad665e002f0f3f1f06daaf68ec18a.jpeg 400w,
               /project/three-phase-brushless-linear-motor-with-trapezoidal-control/bemf_hu3173dcf2f0539f68d0a430a952bdc1a3_2433271_5d72107c3611074fc1e2e06e854dcc09.jpeg 760w,
               /project/three-phase-brushless-linear-motor-with-trapezoidal-control/bemf_hu3173dcf2f0539f68d0a430a952bdc1a3_2433271_1200x1200_fit_q75_lanczos.jpeg 1200w&#34;
               src=&#34;https://Dieselmarble.github.io/project/three-phase-brushless-linear-motor-with-trapezoidal-control/bemf_hu3173dcf2f0539f68d0a430a952bdc1a3_2433271_df7ad665e002f0f3f1f06daaf68ec18a.jpeg&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;!-- &lt;img src=&#34;bemf.jpg&#34; width=&#34;300&#34; hegiht=&#34;90&#34; align=center/&gt; --&gt;</description>
    </item>
    
    <item>
      <title>Three Joint Robot Hand and GUI</title>
      <link>https://Dieselmarble.github.io/project/three-joint-robot-hand-and-gui/</link>
      <pubDate>Wed, 04 Jul 2018 23:38:12 +0000</pubDate>
      <guid>https://Dieselmarble.github.io/project/three-joint-robot-hand-and-gui/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/tklL4wqzF8Q?rel=0&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;This three joint robotic hand(DMT_Hand) was designed to pick up heavy staff and installed on robot &lt;a href=&#34;http://www.imperial.ac.uk/robot-intelligence/robots/robot_de_niro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;De Niro&amp;rdquo;&lt;/a&gt; in Robot Intelligence Lab, Imperial College London.&lt;/p&gt;
&lt;p&gt;I use ROS(robotic operating system) and python to develop a full custom robot control script and graphic user interface based on open source APIs provided by Dynamixel servo.&lt;/p&gt;
&lt;p&gt;My controller is capable in torque, speed, position control and can pefrom any user defined motion profile. All functions and pressure sensor readings can be accessed through the GUI.&lt;/p&gt;
&lt;p&gt;A human-robot interaction glove enables the robot hand to imitate human&amp;rsquo;s motion simutaneously.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check more about this project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pLOISDs4SWg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mechanical Design&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=TM3j-fthACw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Human-Robot Interferance Glove&lt;/a&gt;
&lt;a href=&#34;https://github.com/Dieselmarble/Robot-Hand-and-GUI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
